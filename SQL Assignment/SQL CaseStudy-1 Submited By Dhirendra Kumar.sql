--Select * from dbo.fact
--select * from dbo.location
--select * from dbo.product

--Tasks to be performed:
--1. Display the number of states present in the LocationTable. 
	select Count(distinct [State]) [No of State] from dbo.[location]
--2. How many products are of regular type?
	select count(Product ) from dbo.product where [type] = 'Regular'
--3. How much spending has been done on marketing of product ID 1?
	Select sum(Marketing  ) from dbo.fact where ProductId = 1 
--4. What is the minimum sales of a product?
	Select ProductId , min (Sales) from dbo.fact group by ProductId order by ProductId
--5. Display the max Cost of Good Sold (COGS). 
	Select MAX (COGS) from dbo.fact  
--6. Display the details of the product where product type is coffee. 
	Select * from product where Product_Type = 'coffee'
--7. Display the details where total expenses are greater than 40. 
	Select * from dbo.fact where [Total Expenses] >40
--8. What is the average sales in area code 719?
	Select AVG(Sales) from dbo.fact where [Area Code]= 719
--9. Find out the total profit generated by Colorado state.
	Select Sum(Profit ) from dbo.fact f
	inner join Location l on l.Area_Code = f.[Area Code] 
	where l.State = 'Colorado'
--10. Display the average inventory for each product ID. 
	Select ProductId , avg (Inventory) from dbo.fact group by ProductId order by ProductId
--11. Display state in a sequential order in a Location Table. 
		select distinct State from Location order by State
--12. Display the average budget of the Product where the average budget margin should be greater than 100. 
	select ProductId , avg([Budget Margin]) from fact   group by ProductId having avg([Budget Margin]) >100 
--13. What is the total sales done on date 2010-01-01?
		select Sum(Sales) [Total Sales ]  from fact where cast([Date] as date)  = '2010-01-01'
--14. Display the average total expense of each product ID on an individual date. 
		select cast([Date] as date) [Date] , ProductId , avg([Total Expenses]) [Avg Total Expenses] from fact   
		group by ProductId ,cast([Date] as date) order  by 2,3 
--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 
		Select date, f.productID, product_type, product, sales, profit, state, area_code from fact f
		inner join Product p on p.ProductId = f.ProductId
		inner join Location l on l.Area_Code = f.[Area Code]

--16. Display the rank without any gap to show the sales wise rank. 
		select Dense_Rank() over (order by Sales desc ) [Rank],* from fact  
--17. Find the state wise profit and sales. 
		Select  l.State , SUM(profit)[state wise profit], sum(Sales) [state wise Sales] from fact f		 
		inner join Location l on l.Area_Code = f.[Area Code]
		group by l.State
--18. Find the state wise profit and sales along with the productname. 
		Select  l.State, P.Product , SUM(profit)[state wise profit], sum(Sales) [state wise Sales] from fact f		 
		inner join Location l on l.Area_Code = f.[Area Code]
		inner join Product p on p.ProductId = f.ProductId
		group by l.State,P.Product order by 1,2
--19. If there is an increase in sales of 5%, calculate the increasedsales.
		Select sales, sales + (sales * 0.05) [5% Increase Sales ] from fact 
--20. Find the maximum profit along with the product ID and producttype. 
		Select f.ProductId,p.Product_Type, max(profit) [Max profit]  from fact f
		inner join Product p on p.ProductId = f.ProductId
		group by f.ProductId,p.Product_Type
--21. Create a stored procedure to fetch the result according to the product typefrom Product Table. 
	  if Exists( select * from sysobjects where name ='usp_GetProductByType' and type = 'P')
	  Begin 
		drop proc dbo.usp_GetProductByType
	  End 
	  GO
	  Create proc dbo.usp_GetProductByType(@productType varchar(50))
	  AS
	  BEGIN
		Select ProductId,Product_Type,Product,Type from Product where Product_Type = @productType
	  END 
	  GO 
	  dbo.usp_GetProductByType 'Espresso'
	  

--22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss. 
		Select Case when [Total Expenses] <60 then 'Profit' else 'Loss' End [Profit/Loss],*  from fact
--23. Give the total weekly sales value with the date and product ID details. Useroll-up to pull the data in hierarchical order. 
	  Select DATEPART(YEAR , cast([date] as date )) [Year] 
			, DATEPART(week , cast([date] as date )) [Week] 
			, f.ProductId
			,p.Product_Type
			,p.Product
			, p.Type
			, sum(Sales) [Sales]
			from fact  f
			inner join Product p on p.ProductId = f.ProductId 
			group by DATEPART(YEAR , cast([date] as date )) ,  DATEPART(week , cast([date] as date )) , f.ProductId
			,p.Product_Type
			,p.Product
			, p.Type
			order by 1,2 ,7 desc  
		 
	 
--24. Apply union and intersection operator on the tables which consist of attribute area code. 
		Select [Area Code] from fact
		union 
		select Area_Code from Location

		Select [Area Code] from fact
		Intersect
		select Area_Code from Location

--25. Create a user-defined function for the product table to fetch a particular product type
	--based upon the user’s preference.
	  if Exists( select * from sysobjects where name ='ufn_GetProductByType' and type = 'IF')
	  Begin 
		drop function dbo.ufn_GetProductByType
	  End 
	  GO
	  Create function dbo.ufn_GetProductByType(@productType varchar(50))
	  RETURNS TABLE AS RETURN	   
		Select ProductId,Product_Type,Product,Type from Product where Product_Type = @productType
	  
	  GO 
	  Select * from dbo.ufn_GetProductByType('Herbal Tea') 

--26. Change the product type from coffee to tea where product ID is 1 and undoit. 
		begin transaction 
		 update Product set Product_Type = 'Tea' where ProductId = 1  -- changed the value 

		 select * from Product  -- reflected in scope 
		rollback transaction  -- rollback 

		select * from Product  --no change  

--27. Display the date, product ID and sales where total expenses are between 100 to 200. 
		Select date , productid , sales  from fact where [Total Expenses] between 100 and  200

--28. Delete the records in the Product Table for regular type. 
		begin transaction 
				delete Product where Type = 'Regular' 
		  		select * from Product
		rollback transaction  -- rollback 

--29. Display the ASCII value of the fifth character from the column Product.
		Select ASCII(SUBSTRING(Product, 5, 1) )  Product from Product